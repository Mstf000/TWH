import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:pdf/pdf.dart';
import '../../core/models/summary_report.dart';
import 'ai_summary_parser.dart';

class PdfService {
  static Future<Uint8List> generateSummaryPdf(SummaryReport report) async {
    final pdf = pw.Document();

    // Load assets
    final logoData = await rootBundle.load('assets/logo.png');
    final logoImage = pw.MemoryImage(logoData.buffer.asUint8List());

    final fontData = await rootBundle.load("assets/fonts/Cairo-Regular.ttf");
    final customFont = pw.Font.ttf(fontData);

    final fontBoldData = await rootBundle.load("assets/fonts/Cairo-Bold.ttf");
    final customFontBold = pw.Font.ttf(fontBoldData);

    final sections = AISummaryParser.parseSummary(report.aiSummary);

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        build: (context) => [
          pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              // Header with Logo and Vibrant Title
              pw.Row(
                crossAxisAlignment: pw.CrossAxisAlignment.center,
                children: [
                  pw.Image(logoImage, width: 60, height: 60),
                  pw.SizedBox(width: 16),
                  pw.Text(
                    'The Wellness Hub',
                    style: pw.TextStyle(
                      font: customFontBold,
                      fontSize: 28,
                      color: PdfColor.fromInt(0xFF6200EA), // Purple color
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                  pw.Text(
                    'ðŸ’ªâœ¨',
                    style: pw.TextStyle(fontSize: 26), // Adding emoji to title
                  ),
                ],
              ),
              pw.SizedBox(height: 20),
              // Report Title
              pw.Text(
                'Wellness Report ðŸ’¼',
                style: pw.TextStyle(
                    font: customFontBold,
                    fontSize: 22,
                    color: PdfColor.fromInt(0xFF6A1B9A)), // Bright purple
              ),
              pw.SizedBox(height: 10),
              // Report details with Emoji
              _buildDetails(report, customFont),
              pw.SizedBox(height: 20),
              pw.Divider(),
            ],
          ),
          ...sections.map((section) => pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.SizedBox(height: 16),
                  // Vibrant Title
                  _buildTitle(section.title, customFontBold),
                  pw.SizedBox(height: 8),
                  // Add section content with fun vibe
                  if (section.paragraph.isNotEmpty)
                    _buildParagraph(section.paragraph, customFont),
                  if (section.bullets.isNotEmpty)
                    pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: section.bullets
                          .map((bullet) => _buildBullet(bullet, customFont))
                          .toList(),
                    ),
                ],
              )),
          // Footer with dynamic sign-off
          pw.SizedBox(height: 20),
          pw.Divider(),
          pw.Center(
            child: pw.Text(
              'ðŸš€ Generated by The Wellness Hub AI Engine ðŸš€',
              style: pw.TextStyle(
                  font: customFont,
                  fontSize: 10,
                  color: PdfColors.grey,
                  fontWeight: pw.FontWeight.bold),
            ),
          ),
        ],
      ),
    );

    return pdf.save();
  }

  static pw.Widget _buildTitle(String title, pw.Font font) {
    final isArabic = _isArabic(title);
    return pw.Text(
      title,
      style: pw.TextStyle(
          font: font,
          fontSize: 18,
          color: PdfColor.fromInt(0xFF42A5F5)), // Vibrant Blue
      textDirection: isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
      textAlign: isArabic ? pw.TextAlign.right : pw.TextAlign.left,
    );
  }

  static pw.Widget _buildParagraph(String text, pw.Font font) {
    final isArabic = _isArabic(text);
    return pw.Text(
      text,
      style: pw.TextStyle(font: font, fontSize: 14),
      textDirection: isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
      textAlign: isArabic ? pw.TextAlign.right : pw.TextAlign.left,
    );
  }

  static pw.Widget _buildBullet(String text, pw.Font font) {
    final isArabic = _isArabic(text);
    return pw.Row(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'âœ¨ ', // Sparkling emoji for bullet points
          style: pw.TextStyle(
              font: font,
              fontSize: 14,
              color: PdfColor.fromInt(0xFFFFEB3B)), // Yellow for the bullet
        ),
        pw.Expanded(
          child: pw.Text(
            text,
            style: pw.TextStyle(font: font, fontSize: 14),
            textDirection:
                isArabic ? pw.TextDirection.rtl : pw.TextDirection.ltr,
            textAlign: isArabic ? pw.TextAlign.right : pw.TextAlign.left,
          ),
        ),
      ],
    );
  }

  static bool _isArabic(String text) {
    final arabicRegex = RegExp(r'[\u0600-\u06FF]');
    return arabicRegex.hasMatch(text);
  }

  static pw.Widget _buildDetails(SummaryReport report, pw.Font customFont) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'ðŸ‘¤ Name: ${report.name}',
          style: pw.TextStyle(font: customFont, fontSize: 14),
        ),
        pw.Text(
          'ðŸ“§ Email: ${report.email}',
          style: pw.TextStyle(font: customFont, fontSize: 14),
        ),
        pw.Text(
          'ðŸ“… Date: ${report.date.toLocal()}',
          style: pw.TextStyle(font: customFont, fontSize: 14),
        ),
      ],
    );
  }
}
